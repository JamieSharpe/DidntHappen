using System;
using System.IO;
using System.Text.RegularExpressions;

namespace DidntHappenTest
{
    class Program
    {
        static void Main(string[] args)
        {
            // Regular expressions
            string rgxMethod = @"(^\s*(private|public|static)+.*[)]{1}[;]{0}$)";
            string rgxComment = @"^([ \t]*)([//]{2,})(.*)$";

            // Get the files
            string[] filePaths;

            try
            {
                filePaths = Directory.GetFiles(@"H:\GitHub\PathEditor\PathEditor\PathEditor", "*.cs", SearchOption.AllDirectories);
            }
            catch(Exception e)
            {
                Console.WriteLine("Unable to load the files.");
                return;
            }

            // Check if the file contains documentation
            foreach (var filePath in filePaths)
            {
                Console.WriteLine("Checking if {0} contains documentation...", filePath);
                using (StreamReader sr = new StreamReader(filePath))
                {
                    int lineNumber = 1;
                    string prevLine = String.Empty;
                    string nextLine = String.Empty;
                    while((prevLine = sr.ReadLine()) != null)
                    {
                        lineNumber++;
                        nextLine = sr.ReadLine();
                        if(nextLine == null)
                        {
                            break;
                        }
                        
                        Regex r = new Regex(rgxMethod);
                        Regex rr = new Regex(rgxComment);
                        if (r.Match(nextLine).Success && rr.IsMatch(prevLine))
                        {
                            Console.WriteLine("\tFile: {0}\n is missing documentation on line: {1}", filePath, lineNumber);
                            break;
                        }
                    }
                    Console.WriteLine("\tDone reading {0}", filePath);
                }
            }
        }
    }
}
